@*@model IEnumerable<AppUser>*@
@model IEnumerable<AppUserVM>
@{

    ViewData["Theme"] = "darkblue";
}

<div class="bg-primary p-1 m-1 text-white"><h4>User Accounts with classic taghelper</h4></div>
<div class="text-danger" asp-validation-summary="ModelOnly"></div>

<table class="table table-bordered table-sm">
    <tr><th>ID</th><th>Name</th><th>Email</th></tr>
    @if (Model.Count() == 0)
    {
        <tr><td colspan="3" class="text-center">No User Account</td></tr>
    }
    else
    {
        foreach (AppUserVM user in Model)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>
                    <form asp-action="Delete" asp-route-id="@user.Id" method="post">
                        <a class="btn btn-sm btn-primary" asp-action="Edit" asp-route-id="@user.Id">Edit</a>
                        <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                    </form>
                </td>
            </tr>
        }
    }
</table>

<a class="btn btn-primary" asp-action="Create">Create</a>


<div class="bg-primary p-1 m-1 text-white"><h4>User Accounts with jqwidgets taghelper</h4></div>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <br />
    <br />
    <div align="left">
        <a class="btn btn-primary" href="/Admin/Create">Create User...</a>
    </div>

    <br />
    <jqx-grid id="grid" theme="@ViewData["Theme"]" sortable="true" filterable="true" show-filter-menu-items="true" source-id="Id" show-filter-row="true" show-header="true"
              pageable="true" auto-height="true" width="100%" ready="eventHandler()" source="Model" instance="getInstance()">

        <jqx-grid-columns>
            <jqx-grid-column datafield="UserName" width="25%" text="Last Name"></jqx-grid-column>
            <jqx-grid-column datafield="Email" width="25%"></jqx-grid-column>
            <jqx-grid-column datafield="City" width="25%"></jqx-grid-column>
            <jqx-grid-column text="Action" datafield="Id" width="25%" cells-renderer="cellsrenderer()" filterable="false"></jqx-grid-column>
        </jqx-grid-columns>

    </jqx-grid>

</div>

<br />
<br />
<div class="bg-primary p-1 m-1 text-white"><h4>User Accounts with devexpress html extension(not work with core 2.2)</h4></div>

<div class="text-center">
    <h1 class="display-4">Welcome Devexpress</h1>


    @Html.Partial("GridViewPartial")


</div>



@section Scripts
    {
    <script src="~/jqwidgets/jqxbuttons.js"></script>
    <script src="~/jqwidgets/jqxscrollbar.js"></script>
    <script src="~/jqwidgets/jqxgrid.js"></script>
    <script src="~/jqwidgets/jqxgrid.edit.js"></script>
    <script src="~/jqwidgets/jqxgrid.columnsresize.js"></script>
    <script src="~/jqwidgets/jqxgrid.filter.js"></script>
    <script src="~/jqwidgets/jqxgrid.selection.js"></script>
    <script src="~/jqwidgets/jqxgrid.sort.js"></script>
    <script src="~/jqwidgets/jqxgrid.pager.js"></script>
    <script src="~/jqwidgets/jqxgrid.aggregates.js"></script>
    <script src="~/jqwidgets/jqxgrid.grouping.js"></script>
    <script src="~/jqwidgets/jqxmenu.js"></script>
    <script src="~/jqwidgets/jqxlistbox.js"></script>
    <script src="~/jqwidgets/jqxdropdownlist.js"></script>

    <script type="text/javascript">
        var inst;

        function eventHandler(event) {
            console.log("cell clik event rowindex");
            if (event != undefined && event.args != undefined) {
                console.log(event.args);
                if (event.args.columnindex == 6) {

                    console.log(event.args.rowindex);
                    //$("#grid").jqxGrid('setcolumnproperty', 'Action', 'filterable', false);
                    //inst["setcolumnproperty"]('Action', 'filterable', false);
                }
            }

            inst["setcolumnproperty"]('Id', 'filterable', false);

        }

        function cellsrenderer(row, columnfield, value, defaulthtml, columnproperties, rowdata) {
            console.log("sono dentro cellsrenderer");
            console.log("valooooore row");
            console.log(row);
            console.log(columnfield);
            console.log("row data da  renderer");
            console.log(rowdata);
            //alert(columnfield);
            // var rowid = inst["getselectedrowindex"]();
            var id = rowdata.Id
            // id = inst["getrowid"](row);
            if (inst != undefined) {
                id = inst["getrowid"](row);
                console.log("row id");
                console.log(id);
            }

            // return '<input type="Button" class="btn btn-danger" text="Delete" onClick="buttonclick()" value="Delete"/>';
            return '<a class="btn btn-info" href="/Admin/Edit/' + id + '">Edit</a> <a class="btn btn-danger" href="/Admin/Delete/' + id + '">Delete</a>'
        }

        function getInstance(instance) {
            console.log("sono dentro getInstance");
            inst = instance;
            // fistname = instance["getrowid"](0);
        }

        var buttonclick = function (event) {
            //instance["getselectedrowindex"]()
            var rowid = inst["getselectedrowindex"]();
            // alert(rowid);
            console.log(inst["getrowid"](rowid));
            console.log("row data :")
            console.log(inst["getrowdata"](rowid))

            console.log("row data by ID :")
            console.log(inst["getrowdatabyid"](0));

            //var result = instance["getrows"]()
            console.log("getrows :")
            console.log(inst["getrows"]());

            //var result = instance["getdatainformation"]();

            console.log("getdatainformation :")
            console.log(inst["getdatainformation"]());

            //event
            console.log("button click event :")
            console.log(event);

            //inst["exportdata"]('xls', 'grid', true);
            console.log("instanceeeeeeeeeeeeeeeeee");
            console.log(inst);
        }
    </script>


}